from typing import Union

from pyro.distributions import Normal
from torch import Tensor

from .base import BaseProposal


class RandomWalk(BaseProposal):
    r"""
    Implements a random walk proposal, in which the candidate kernel is generated by
        .. math::
            \theta^* \sim \mathcal{N} \left (\theta, \sigma \right),

    where :math:`\theta` denotes the latest accepted parameter candidate, and :math:`\sigma` the scale of the
    distribution to use. Note that we generate the kernels on the constrained space of the parameters.
    """

    def __init__(self, scale: Union[float, Tensor] = 1e-2):
        """
        Internal initializer for :class:`RandomWalk`.

        Args:
            scale (Union[float, Tensor], optional): scale of the normal distribution. Can be either a "global" scale
            as specified by a ``float``, or a tensor with parameter specific scales. Defaults to 1e-2.
        """

        super().__init__()
        self._scale = scale

    def build(self, context, state, filter_, y):
        return Normal(context.stack_parameters(constrained=False), self._scale).to_event(1)

    def exchange(self, latest, candidate, mask):
        latest.mean[mask] = candidate.mean[mask]
        latest.stddev[mask] = candidate.stddev[mask]
