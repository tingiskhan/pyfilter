from torch.distributions import Independent, Normal
from torch import Tensor
from typing import Union
from .base import BaseProposal
from ....utils import params_to_tensor


class RandomWalk(BaseProposal):
    """
    Implements a random walk proposal, in which the candidate kernel is generated by
        .. math::
            \\theta^* \sim \mathcal{N} \left (\\theta, \sigma \\right),

    where :math:`\\theta` denotes the latest accepted parameter candidate, and :math:`\sigma` the scale of the
    distribution to use. Note that we generate the kernels on the constrained space of the parameters.
    """

    def __init__(self, scale: Union[float, Tensor] = 1e-2):
        """
        Initializes the ``RandomWalk`` class.

        Args:
             scale: Optional parameter specifying the scale of the normal distribution. Can be either a "global" scale
                as specified by a ``float``, or a tensor with parameter specific scales.
        """

        self._scale = scale

    def build(self, state, filter_, y):
        return Independent(Normal(params_to_tensor(filter_.ssm, constrained=False), self._scale), 1)

    def exchange(self, latest, candidate, indices):
        new_loc = latest.mean.clone()
        new_scale = latest.stddev.clone()

        new_loc[indices] = candidate.mean[indices]
        new_scale[indices] = candidate.stddev[indices]

        latest.base_dist.__init__(new_loc, new_scale)
